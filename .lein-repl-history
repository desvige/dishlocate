(load-file "src/dishlocate.clj")
(find-dish "tacos" "central park")
(dishlocate/find-dish "tacos" "central park")
(dishlocate.core/find-dish "tacos" "central park")
(:require 'clojure.string)
(clojure.string/blank? "")
(:require 'clf)
(:require [dishlocate.core :as ds])
(:require [cheshire.core :as json])
(load-file "src/dishlocate/core.clj")
(clojure.string/upper-case "clojure")
(require '[cheshire.core])
(require '[cheshire.coref])
(require '[cheshire.core])
(require '[dishlocate.core])
(require '[dishlocate.gmaps])
(require '[dishlocate.core])
(require '[dishlocate.gmaps])
(require '[dishlocate.gmapsf])
(require '[dishlocate.gmaps])
(require '[dishlocate.core])
(:require [dishlocate.gmaps :as geo])
(:require '[dishlocate.gmaps])
(require '[cheshire.core])
(require [cheshire.core :as json])
(require '[dishlocate.core])
(require [dishlocate.core])
(require '[dishlocate.core])
(dishlocate.core/has-dish? burger mcdo)
(dishlocate.core/has-dish? "burger" "mcdo")
(require '[dishlocate.core])
(dishlocate.core/find-dish "tacos" "central park")
(require '[dishlocate.gmaps])
(require '[dishlocate.gmaps :as maps])
(require '[dishlocate.gmaps])
(require 'dishlocate.gmaps)
(in-ns 'dishlocate.gmaps)
(find-dish "" "")
(require 'dishlocate.core)
(defn has-dish? [dish place]
  (try
    (let [html (slurp (maps/get-menu-url place))]
      (str/includes? (str/lower-case html) dish))
    (catch Exception ex
      false)))
(:require '[dishlocate.gmaps :as maps])
(defn has-dish? [dish place]
  (try
    (let [html (slurp (maps/get-menu-url place))]
      (str/includes? (str/lower-case html) dish))
    (catch Exception ex
      false)))
(:require 'dishlocate.core)
(:require 'dishlocate.maps)
(:require 'dishlocate.mapsf)
(:require 'dishlocate.gmapz)
(:require 'dishlocate.gmaps)
(:require 'dishlocate.core)
(clojure.core/refer 'dishlocate.core))
(in-ns 'dishlocate.gmaps)
(in-ns 'user)
(load "dishlocate/core")
(ns user)
(load "/dishlocate/core")
(load "dishlocate/core")
(load "dishlocate/gmaps")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "central park")
(load "dishlocate.gmaps.tests")
(load "dishlocate/gmaps/tests")
(run-tests)
(run-all-tests)
(dishlocate.gmaps.tests/test-find-restaurants)
(load "dishlocate/gmaps/tests")
(dishlocate.gmaps.tests/test-find-restaurants)
(load "dishlocate/gmaps/tests")
(dishlocate.gmaps.tests/test-get-gmaps-url)
(run-tests)
(dishlocate.gmaps.tests/run-tests)
(in-ns dishlocate.gmaps.tests)
(in-ns dishlocate/gmaps/tests)
(in-ns dishlocate.gmaps.tests)
(load "dishlocate/gmaps/tests")
(run-all-tests)
(use 'clojure.test)
(run-tests)
(run-all-tests)
(load "dishlocate/gmaps/tests")
(run-all-tests)
(load "dishlocate/core/tests")
(load "dishlocate/gmaps/tests")
(load "dishlocate/core/tests")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(dishlocate.core/find-dish "" "castres")
(load "dishlocate/core/tests")
(find-restaurants "castres")
(dishlocate.gmaps/find-restaurants "castres")
(dishlocate.gmaps/get-text-search-request "castres")
(dishlocate.gmaps/find-restaurants "castres")
(dishlocate.core/find-dish "tacos" "castres")
(dishlocate.gmaps/find-restaurants "castres")
(dishlocate.gmaps/get-menu-url '["ChIJO8jf--gRrhIR24sZxdr0PCw" "Le Gambetta - restauration rapide"])
(slurp "https://maps.google.com/?cid=3187691856718302171")
(dishlocate.gmaps/has-dish? "tacos" '["ChIJO8jf--gRrhIR24sZxdr0PCw" "Le Gambetta - restauration rapide"])
(dishlocate.core/has-dish? "tacos" '["ChIJO8jf--gRrhIR24sZxdr0PCw" "Le Gambetta - restauration rapide"])
(slurp "https://maps.google.com/?cid=3187691856718302171")
(clojure.string/lower-case (slurp "https://maps.google.com/?cid=3187691856718302171"))
(slurp "https://maps.google.com/?cid=3187691856718302171")
(clojure.string/includes? (slurp "https://maps.google.com/?cid=3187691856718302171") "tacos")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/core")
(dishlocate.core/find-dish "tacos" "castres")
(load "dishlocate/coretest")
(load "dishlocate/coretest/tests")
(load "dishlocate/gmaps/tests")
(dishlocate/gmaps/tests/run-tests)
(dishlocate.gmaps.tests/run-tests)
(run-all-tests)
(clojure.test/run-all-tests)
(load "dishlocate/coretest/tests")
(dishlocate.gmaps.tests/run-tests)
(load "dishlocate/coretest/tests")
(run-tests 'dishlocate.gmaps.tests)
(clojure.test/run-tests 'dishlocate.gmaps.tests)
(load "dishlocate/gmaps/tests")
(run-tests 'dishlocate.gmaps.tests)
(clojure.test/run-tests 'dishlocate.gmaps.tests)
(load "dishlocate/gmaps/tests")
(clojure.test/run-tests 'dishlocate.gmaps.tests)
(load "dishlocate/gmaps/tests")
(clojure.test/run-tests 'dishlocate.gmaps.tests)
(load "dishlocate/gmaps/tests")
(clojure.test/run-tests 'dishlocate.gmaps.tests)
(load "dishlocate/coretest/tests")
(clojure.test/run-tests 'dishlocate.coretest.tests)
(load "dishlocate/coretest/tests")
(clojure.test/run-tests 'dishlocate.coretest.tests)
(load "dishlocate/core/tests")
(clojure.test/run-tests 'dishlocate.core.tests)
(load "dishlocate/core/tests")
(clojure.test/run-tests 'dishlocate.core.tests)
